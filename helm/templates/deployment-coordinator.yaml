apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "trino.coordinator" . }}
  labels:
    app: {{ template "trino.name" . }}
    chart: {{ template "trino.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: coordinator
    {{- if .Values.commonLabels }}
    {{- tpl (toYaml .Values.commonLabels) . | nindent 4 }}
    {{- end }}
spec:
  selector:
    matchLabels:
      app: {{ template "trino.name" . }}
      release: {{ .Release.Name }}
      component: coordinator
  template:
    metadata:
      {{- if .Values.coordinator.annotations }}
      annotations:
      {{- tpl (toYaml .Values.coordinator.annotations) . | nindent 8 }}
      {{- end }}
      labels:
        app: {{ template "trino.name" . }}
        release: {{ .Release.Name }}
        component: coordinator
        {{- if .Values.coordinator.labels }}
        {{- tpl (toYaml .Values.coordinator.labels) . | nindent 8 }}
        {{- end }}
        {{- if .Values.commonLabels }}
        {{- tpl (toYaml .Values.commonLabels) . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "trino.serviceAccountName" . }}
      {{- with .Values.securityContext }}
      securityContext:
        runAsUser: {{ .runAsUser }}
        runAsGroup: {{ .runAsGroup }}
      {{- end }}
      {{- if .Values.shareProcessNamespace.coordinator }}
      shareProcessNamespace: {{ .Values.shareProcessNamespace.coordinator }}
      {{- end }}
      volumes:
        {{- if .Values.git_sync.enabled | default false }}
        - emptyDir:
            sizeLimit: 2Gi
          name: git-sync
        {{- end }}
        - name: pre-install
          emptyDir: {}
        - name: config-volume
          configMap:
            name: {{ template "trino.coordinator" . }}
        - name: catalog-volume
          configMap:
            name: {{ template "trino.catalog" . }}
        {{- if .Values.ranger.enabled | default false }}
        - name: ranger-volume
          configMap:
            name: {{ template "trino.ranger" . }}
        {{- end }}
        - name: schemas-volume
          configMap:
            name: {{ .Release.Name }}-schemas-volume-coordinator
        {{- if .Values.accessControl }}{{- if eq .Values.accessControl.type "configmap" }}
        - name: access-control-volume
          configMap:
            name: trino-access-control-volume-coordinator
        {{- end }}{{- end }}
        {{- if eq .Values.server.config.authenticationType "PASSWORD" }}
        - name: password-volume
          secret:
            secretName: trino-password-authentication
            items:
              - key: password.db
                path: password.db
              {{- if .Values.auth.groups }}
              - key: group.db
                path: group.db
              {{- end }}
        {{- end }}
        {{- range .Values.secretMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .secretName }}
        {{- end }}
        {{- range .Values.coordinator.secretMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .secretName }}
        {{- end }}
      {{- if .Values.initContainers.coordinator }}
      initContainers:
      {{- tpl (toYaml .Values.initContainers.coordinator) . | nindent 6 }}
      {{- end }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      containers:
        {{- if .Values.git_sync.enabled | default false }}
        - env:
            - name: GIT_SYNC_REPO
              valueFrom:
                secretKeyRef:
                    key: GIT_DP_FLOW_URL
                    name: fiber
            - name: GIT_SYNC_BRANCH
              value: master
            - name: GIT_SYNC_ROOT
              value: /mnt/data/repo/schemas
            - name: GIT_SYNC_DEST
              value: repo
            - name: GIT_SYNC_ONE_TIME
              value: "false"
            - name: GIT_SYNC_REV
              value: HEAD
            - name: GIT_SYNC_DEPTH
              value: "1"
            - name: GIT_SYNC_WAIT
              value: "60"
            - name: GIT_SYNC_TIMEOUT
              value: "120"
            - name: GIT_SYNC_ADD_USER
              value: "true"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "0"
            - name: GIT_KNOWN_HOSTS
              value: "false"
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
            - name: GIT_SYNC_USERNAME
              valueFrom:
                secretKeyRef:
                    key: git_user
                    name: fiber
            - name: GIT_SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                    key: git_pwd
                    name: fiber
          image: k8s.gcr.io/git-sync/git-sync:v3.2.2
          imagePullPolicy: IfNotPresent
          name: git-sync
          resources: {}
          securityContext:
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /mnt/data/repo/schemas
              name: git-sync
        {{- end }}
        - name: {{ .Chart.Name }}-coordinator
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: [ "/bin/bash", "-c" ]
          args:
              - "/usr/lib/trino/bin/run-trino"
          env:
            - name: RANGER_ENABLED
              value: "{{ .Values.ranger.enabled | default false }}"
            - name: RANGER_CONFIG_PATH
              value: {{ .Values.ranger.mountPath | default "/mnt/ranger" }}
            {{- toYaml .Values.env | nindent 12 }}
          envFrom:
            {{- toYaml .Values.envFrom | nindent 12 }}
          volumeMounts:
            - mountPath: {{ .Values.server.config.mountPath }}
              name: config-volume
            - mountPath: {{ .Values.server.config.mountPath }}/catalog
              name: catalog-volume
            - mountPath: {{ .Values.kafka.mountPath }}
              name: schemas-volume
            {{- if .Values.ranger.enabled | default false }}
            - mountPath: {{ .Values.ranger.mountPath | default "/mnt/ranger" }}
              name: ranger-volume
            {{- end }}
            {{- if .Values.accessControl }}{{- if eq .Values.accessControl.type "configmap" }}
            - mountPath: {{ .Values.server.config.path }}/access-control
              name: access-control-volume
            {{- end }}{{- end }}
            {{- range .Values.secretMounts }}
            - name: {{ .name }}
              mountPath: {{ .path }}
            {{- end }}
            {{- range .Values.coordinator.secretMounts }}
            - name: {{ .name }}
              mountPath: {{ .path }}
            {{- end }}
            {{- if eq .Values.server.config.authenticationType "PASSWORD" }}
            - mountPath: {{ .Values.server.config.path }}/auth
              name: password-volume
            {{- end }}
            {{- if .Values.git_sync.enabled | default false }}
            - mountPath: /mnt/data/repo/schemas
              name: git-sync
              readOnly: true
            {{- end }}
            {{- with .Values.volumeMounts }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- range $key, $value := .Values.coordinator.additionalExposedPorts }}
            - name: {{ $value.name }}
              containerPort: {{ $value.port }}
              protocol: {{ $value.protocol }}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /v1/info
              port: http
            initialDelaySeconds: {{ .Values.coordinator.livenessProbe.initialDelaySeconds | default 20 }}
            periodSeconds: {{ .Values.coordinator.livenessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.coordinator.livenessProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.coordinator.livenessProbe.failureThreshold | default 6 }}
            successThreshold: {{ .Values.coordinator.livenessProbe.successThreshold | default 1 }}
          readinessProbe:
            httpGet:
              path: /v1/info
              port: http
            initialDelaySeconds: {{ .Values.coordinator.readinessProbe.initialDelaySeconds | default 20 }}
            periodSeconds: {{ .Values.coordinator.readinessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.coordinator.readinessProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.coordinator.readinessProbe.failureThreshold | default 6 }}
            successThreshold: {{ .Values.coordinator.readinessProbe.successThreshold | default 1 }}
          resources:
            {{- toYaml .Values.coordinator.resources | nindent 12 }}
      {{- if .Values.sidecarContainers.coordinator }}
        {{- toYaml .Values.sidecarContainers.coordinator | nindent 8 }}
      {{- end }}
      {{- with .Values.coordinator.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.coordinator.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.coordinator.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
